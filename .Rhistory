x<-1:5
x
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
bye()
install_from_swirl("R Programming")
swirl()
install_from_swirl("R Programming")
bye()
read.csv
swirl()
library("swirl")
swirl()
12
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[3,5,7]
c(x[3,5,7])
c(3,5,7)
x[c(3,5,7)]
x[0]
x[c(3000)]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<- c("foo","bar", "norf")
identical(vect, vect2)
2
vect["bar"]
vect[c("foo","bar")]
my_vector<-[1:20]
my_vector=1:20
my_vector<-(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-Bill, Gina, Kelly, Sean
patients<- [Bill, Gina, Kelly, Sean]
patients<-c(Bill, Gina, Kelly, Sean)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight","bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
getwd()
ls()
x<-9
ls()
list.file()
dir()
list.files()
?list.files
args()
args(list.files)
dir(old.dir)
old.dir
old.dir()
old.dir<-dir()
old.dir<-getwd()
dir.create(testdir)
dir.create()=testdir
testdir<-dir.creat()
testdir<-dir.create()
dir.create()
?dir.create
source('swirl')
swirl()
library('swirl')
swirl()
install.packages("rmarkdown")
getwd
getwe()
getwd()
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("knitr", dependencies = TRUE)
install.packages("knitr", repos = "http://cran.rstudio.com", type = "source")
install.packages("knitr", dependencies = TRUE)
install.packages("knitr")
install.packages("knitr", repos = "http://cran.rstudio.com", type = "source")
install.packages("knitr")
install.packages("rmarkdown", repos = "http://cran.rstudio.com", type = "source")
q()
dataProcess <- TRUE
if (!file.exists("repdata_data_StormData.csv")) {
url="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url, "repdata_data_StormData.csv.bz2", quiet=T)
bunzip2("repdata_data_StormData.csv.bz2")
unlink("repdata_data_StormData.csv.bz2")
dataProcess <- FALSE
}
StormData <- read.csv("repdata_data_StormData.csv", sep=",", header = T)
str(StormData)
library(R.utils) # for bunzip2
library(dplyr) # for count & aggregate method
library(reshape2) # for melt
library(ggplot2) # for plots
library(grid) # for grids
library(gridExtra) # for advanced plots
library(scales) # for plot scaling
dataProcess <- TRUE
if (!file.exists("repdata_data_StormData.csv")) {
url="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url, "repdata_data_StormData.csv.bz2", quiet=T)
bunzip2("repdata_data_StormData.csv.bz2")
unlink("repdata_data_StormData.csv.bz2")
dataProcess <- FALSE
}
StormData <- read.csv("repdata_data_StormData.csv", sep=",", header = T)
str(StormData)
if(dataProcess){
ExtractColumns <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
ExtractStormData <- StormData[, ExtractColumns]
}
ExtractStormData$PROPDMGNUM = 0
ExtractStormData[ExtractStormData$PROPDMGEXP == "H", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "H", ]$PROPDMG * 10^2
ExtractStormData[ExtractStormData$PROPDMGEXP == "K", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "K", ]$PROPDMG * 10^3
ExtractStormData[ExtractStormData$PROPDMGEXP == "M", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "M", ]$PROPDMG * 10^6
ExtractStormData[ExtractStormData$PROPDMGEXP == "B", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "B", ]$PROPDMG * 10^9
if(dataProcess){
ExtractColumns <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
ExtractStormData <- StormData[, ExtractColumns]
}
ExtractStormData$PROPDMGNUM = 0
ExtractStormData[ExtractStormData$PROPDMGEXP == "H", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "H", ]$PROPDMG * 10^2
ExtractStormData[ExtractStormData$PROPDMGEXP == "K", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "K", ]$PROPDMG * 10^3
ExtractStormData[ExtractStormData$PROPDMGEXP == "M", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "M", ]$PROPDMG * 10^6
ExtractStormData[ExtractStormData$PROPDMGEXP == "B", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "B", ]$PROPDMG * 10^9
ExtractStormData$PROPDMGNUM = 0
ExtractStormData <- StormData[, ExtractColumns]
if(dataProcess){
ExtractColumns <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
ExtractStormData <- StormData[, ExtractColumns]
}
ExtractStormData$PROPDMGNUM = 0
ExtractStormData <- StormData[, ExtractColumns]
library(R.utils) # for bunzip2
library(dplyr) # for count & aggregate method
library(reshape2) # for melt
library(ggplot2) # for plots
library(grid) # for grids
library(gridExtra) # for advanced plots
library(scales) # for plot scaling
dataProcess <- TRUE
if (!file.exists("repdata_data_StormData.csv")) {
url="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url, "repdata_data_StormData.csv.bz2", quiet=T)
bunzip2("repdata_data_StormData.csv.bz2")
unlink("repdata_data_StormData.csv.bz2")
dataProcess <- FALSE
}
StormData <- read.csv("repdata_data_StormData.csv", sep=",", header = T)
str(StormData)
unique(ExtractStormData$PROPDMGEXP)
unique(ExtractStormData$CROPDMGEXP)
if(dataProcess){
ExtractColumns <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
ExtractStormData <- StormData[, ExtractColumns]
}
dataProcess <- TRUE
if (!file.exists("repdata_data_StormData.csv")) {
url="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url, "repdata_data_StormData.csv.bz2", quiet=T)
bunzip2("repdata_data_StormData.csv.bz2")
unlink("repdata_data_StormData.csv.bz2")
dataProcess <- FALSE
}
StormData <- read.csv("repdata_data_StormData.csv", sep=",", header = T)
str(StormData)
if(dataProcess){
ExtractColumns <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
ExtractStormData <- StormData[, ExtractColumns]
}
head(ExtractStormData)
if(dataProcess){
ExtractColumns <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
ExtractStormData <- StormData[, ExtractColumns]
}
head(ExtractStormData)
nique(ExtractStormData$PROPDMGEXP)
unique(ExtractStormData$CROPDMGEXP)
unique(ExtractStormData$PROPDMGEXP)
unique(ExtractStormData$CROPDMGEXP)
if(dataProcess){
ExtractColumns <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
ExtractStormData <- StormData[, ExtractColumns]
}
ExtractStormData <- ExtractStormData[(ExtractStormData$PROPDMGEXP != ""
& ExtractStormData$PROPDMGEXP != "+"
& ExtractStormData$PROPDMGEXP != "-"
& ExtractStormData$PROPDMGEXP != "?") &
(ExtractStormData$CROPDMGEXP != ""
& ExtractStormData$CROPDMGEXP != "+"
& ExtractStormData$CROPDMGEXP != "-"
& ExtractStormData$CROPDMGEXP != "?"), ]
head(ExtractStormData)
unique(ExtractStormData$PROPDMGEXP)
unique(ExtractStormData$CROPDMGEXP)
ExtractStormData$PROPDMGNUM = 0
ExtractStormData[ExtractStormData$PROPDMGEXP == "H", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "H", ]$PROPDMG * 10^2
ExtractStormData[ExtractStormData$PROPDMGEXP == "K", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "K", ]$PROPDMG * 10^3
ExtractStormData[ExtractStormData$PROPDMGEXP == "M", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "M", ]$PROPDMG * 10^6
ExtractStormData[ExtractStormData$PROPDMGEXP == "B", ]$PROPDMGNUM = ExtractStormData[ExtractStormData$PROPDMGEXP == "B", ]$PROPDMG * 10^9
ExtractStormData$CROPDMGNUM = 0
ExtractStormData[ExtractStormData$CROPDMGEXP == "H", ]$CROPDMGNUM = ExtractStormData[ExtractStormData$CROPDMGEXP == "H", ]$CROPDMG * 10^2
ExtractStormData[ExtractStormData$CROPDMGEXP == "K", ]$CROPDMGNUM = ExtractStormData[ExtractStormData$CROPDMGEXP == "K", ]$CROPDMG * 10^3
ExtractStormData[ExtractStormData$CROPDMGEXP == "M", ]$CROPDMGNUM = ExtractStormData[ExtractStormData$CROPDMGEXP == "M", ]$CROPDMG * 10^6
ExtractStormData[ExtractStormData$CROPDMGEXP == "B", ]$CROPDMGNUM = ExtractStormData[ExtractStormData$CROPDMGEXP == "B", ]$CROPDMG * 10^9
# import ggplot2 library to plot the result
library(ggplot2)
# plot number of fatalities with the most harmful event type
fatalities <- aggregate(FATALITIES ~ EVTYPE, data=ExtractStormData, sum)
fatalities <- fatalities[order(-fatalities$FATALITIES), ][1:10, ]
fatalities$EVTYPE <- factor(fatalities$EVTYPE, levels = fatalities$EVTYPE)
ggplot(fatalities, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat = "identity", fill = "red", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Fatalities") + ggtitle("Number of fatalities by top 10 Weather Events")
# import ggplot2 library to plot the result
library(ggplot2)
# plot number of injuries with the most harmful event type
injuries <- aggregate(INJURIES ~ EVTYPE, data=ExtractStormData, sum)
injuries <- injuries[order(-injuries$INJURIES), ][1:10, ]
injuries$EVTYPE <- factor(injuries$EVTYPE, levels = injuries$EVTYPE)
ggplot(injuries, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat = "identity", fill = "red", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Injury Number") + ggtitle("Top 10 Injury Number by Weather Events")
# import ggplot2 library to plot the result
library(ggplot2)
# plot number of damages with the most harmful event type
damages <- aggregate(PROPDMGNUM + CROPDMGNUM ~ EVTYPE, data=ExtractStormData, sum)
names(damages) = c("EVTYPE", "TOTALDAMAGE")
damages <- damages[order(-damages$TOTALDAMAGE), ][1:10, ]
damages$EVTYPE <- factor(damages$EVTYPE, levels = damages$EVTYPE)
ggplot(damages, aes(x = EVTYPE, y = TOTALDAMAGE)) +
geom_bar(stat = "identity", fill = "red", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Damages ($)") + ggtitle("Property & Crop Damages by top 10 Weather Events")
damages <- aggregate(PROPDMGNUM, CROPDMGNUM, PROPDMGNUM + CROPDMGNUM ~ EVTYPE, data=ExtractStormData, sum)
names(damages) = c("EVTYPE", "PROPDMGNUM", "CROPDMGNUM", "TOTALDAMAGE")
damages <- aggregate(PROPDMGNUM ~ EVTYPE, data=ExtractStormData, sum)
names(damages) = c("EVTYPE", "PROPDMGNUM")
damages <- damages[order(-damages$PROPDMGNUM), ][1:10, ]
damages$EVTYPE <- factor(damages$EVTYPE, levels = damages$EVTYPE)
ggplot(damages, aes(x = EVTYPE, y = PROPDMGNUM)) +
geom_bar(stat = "identity", fill = "red", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Damages ($)") + ggtitle("Property Damages by top 10 Weather Events")
damages <- aggregate(CROPDMGNUM ~ EVTYPE, data=ExtractStormData, sum)
names(damages) = c("EVTYPE", "CROPDMGNUM")
damages <- damages[order(-damages$CROPDMGNUM), ][1:10, ]
damages$EVTYPE <- factor(damages$EVTYPE, levels = damages$EVTYPE)
ggplot(damages, aes(x = EVTYPE, y = CROPDMGNUM)) +
geom_bar(stat = "identity", fill = "red", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Damages ($)") + ggtitle("Top 10 Crop Damages by Weather Events")
setwd("D:/R document/coursera/devdataprod/project")
setwd("D:/R document/coursera/devdataprod/project")
runApp()
install.packages("shiny")
runApp()
runApp()
